LIBRARY 	IEEE;
USE 		IEEE.STD_LOGIC_1164.ALL;
USE 		IEEE.NUMERIC_STD.all;

ENTITY vga_driver IS
	PORT 
	(	CLK 	: IN  STD_LOGIC; -- 50 MHZ
		RST 	: IN  STD_LOGIC;
		HSYNC	: OUT STD_LOGIC;
		VSYNC	: OUT STD_LOGIC;
		RGB	: OUT STD_LOGIC_VECTOR (11 DOWNTO 0)); -- 4 BITS / COLOR
END vga_simples;


ARCHITECTURE vga_generation OF vga_simples IS

	
	COMPONENT lcd_char_8x8 
		PORT 
		(	ROW 	: IN  STD_LOGIC_VECTOR (2  DOWNTO 0);
			COL   : IN  STD_LOGIC_VECTOR (2  DOWNTO 0);
			Z	   : OUT STD_LOGIC_VECTOR (11 DOWNTO 0)); -- 4 BITS CADA COR
	END COMPONENT;

	CONSTANT HD 	:	INTEGER := 639;
	CONSTANT HFP 	:	INTEGER := 16;
	CONSTANT HSP	:	INTEGER := 96;
	CONSTANT HBP 	:	INTEGER := 48;
	
	CONSTANT VD 	:	INTEGER := 479;
	CONSTANT VFP 	:	INTEGER := 10;
	CONSTANT VSP	:	INTEGER := 2;
	CONSTANT VBP 	:	INTEGER := 33;
	
--	CONSTANT HD 	:	INTEGER := 799;
--	CONSTANT HFP 	:	INTEGER := 56;
--	CONSTANT HSP	:	INTEGER := 120;
--	CONSTANT HBP 	:	INTEGER := 64;
--	
--	CONSTANT VD 	:	INTEGER := 599;
--	CONSTANT VFP 	:	INTEGER := 37;
--	CONSTANT VSP	:	INTEGER := 6;
--	CONSTANT VBP 	:	INTEGER := 23;

	SIGNAL	HPOS	:	INTEGER := 0;
	SIGNAL	VPOS	:	INTEGER := 0;
	
	SIGNAL	BHPOS : 	INTEGER := 0;
	SIGNAL	BVPOS : 	INTEGER := 100;
	SIGNAL	BHS	:	INTEGER := 30;
	SIGNAL	BVS	:	INTEGER := 40;
	SIGNAL 	BHSP  :  INTEGER := 4;
	SIGNAL 	BVSP  :  INTEGER := 4;
	SIGNAL 	BHDIR :  STD_LOGIC := '0';
	SIGNAL 	BVDIR :  STD_LOGIC := '0';
	
	SIGNAL	CLK25 :	STD_LOGIC := '0';
	
	SIGNAL   LCD_OUT : STD_LOGIC_VECTOR (11 DOWNTO 0);
	SIGNAL 	LCD_ROW : STD_LOGIC_VECTOR (2 downto 0);
	SIGNAL 	LCD_COL : STD_LOGIC_VECTOR (2 downto 0);


BEGIN

	clk_div : PROCESS (CLK)
	BEGIN
		IF (CLK'EVENT AND CLK = '1') THEN
			CLK25 <= NOT CLK25;
		END IF;
	END PROCESS;


	hv_cont : PROCESS (CLK25, RST)
	BEGIN
		IF (RST = '1') THEN
			HPOS <= 0;
			VPOS <= 0;
		ELSIF (CLK25'EVENT AND CLK25 = '1') THEN
			IF (HPOS = (HD + HFP + HSP + HBP)) THEN
				HPOS <= 0;
				IF (VPOS = (VD + VFP + VSP + VBP)) THEN
					VPOS <= 0;
					
					IF (BHPOS >= (HD - BHS)) THEN
						BHDIR <= '1';
					ELSIF (BHPOS <= 0) THEN
						BHDIR <= '0';
					END IF;
					
					IF (BHDIR = '0') THEN
						IF (BHPOS <= (HD - BHS - BHSP)) THEN
							BHPOS <= BHPOS + BHSP;
						ELSE
							BHDIR <= '1';
						END IF;
					ELSE
						IF (BHPOS >= (BHSP)) THEN
							BHPOS <= BHPOS - BHSP;
						ELSE
							BHDIR <= '0';
						END IF;
					END IF;					
					
				ELSE
					VPOS <= VPOS + 1;
				END IF;
			ELSE
				HPOS <= HPOS + 1;
			END IF;
		END IF;
	END PROCESS hv_cont;
	
	
	hv_sync : PROCESS(CLK25, RST, HPOS, VPOS)
	BEGIN
		IF (RST = '1') THEN
			HSYNC <= '0';
			VSYNC <= '0';
		ELSIF (CLK25'EVENT AND CLK25 = '1') THEN
			IF ((HPOS <= (HD + HFP)) OR (HPOS > (HD + HFP + HSP))) THEN
				HSYNC <= '1';
			ELSE
				HSYNC <= '0';
			END IF;
			IF ((VPOS <= (VD + VFP)) OR (VPOS > (VD + VFP + VSP))) THEN
				VSYNC <= '1';
			ELSE
				VSYNC <= '0';
			END IF;
		END IF;
	END PROCESS hv_sync;
	
	draw : PROCESS(CLK25, RST, HPOS, VPOS)
	BEGIN
		IF (RST = '1') THEN
			RGB <= "000000000000";
		ELSIF (CLK25'EVENT AND CLK25 = '1') THEN
			IF ((HPOS <= HD) AND (VPOS <= VD)) THEN
			
				IF ((HPOS >= BHPOS) AND (HPOS < (BHPOS + BHS)) AND (VPOS >= BVPOS) AND (VPOS < BVPOS + BVS)) THEN
					RGB <= "111111111111";
				ELSE
					RGB <= "000000000000";
				END IF;
				
				-- This line demonstrates how to convert positive integers
				LCD_ROW <= std_logic_vector(to_unsigned(VPOS, LCD_ROW'length));
				LCD_COL <= std_logic_vector(to_unsigned(HPOS, LCD_COL'length));
				RGB <= LCD_OUT;
					
			END IF;
		END IF;
	END PROCESS draw;
	

	CHAR1: lcd_char_8x8 PORT MAP (LCD_ROW, LCD_COL, LCD_OUT);

END vga_generation;
